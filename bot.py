import os
import random
import requests
from datetime import datetime
from fastapi import FastAPI
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.types import Message, Update

API_TOKEN = "7967235756:AAE4_T3cqfpBiddBzSlLvq0UCGjlPr7Oc_M"
ADMIN_ID = 6613852308

# –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
CHECKIDAY_API_URL = "https://checkiday.com/api/v1/dates/"
CALENDAR_API_URL = "https://date.nager.at/api/v2/PublicHolidays/{year}/RU"

# –†–µ—Å–ø—É–±–ª–∏–∫–∞–Ω—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω–∞
BASHKORTOSTAN_HOLIDAYS = {
    "01-21": "–î–µ–Ω—å —Ä–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ –±–∞—à–∫–∏—Ä",
    "06-24": "–ü—Ä–∞–∑–¥–Ω–∏–∫ –°–∞–±–∞–Ω—Ç—É–π",
    "05-09": "–î–µ–Ω—å –ü–æ–±–µ–¥—ã",
    "04-15": "“†—ã—É—ã–ª—Ç –Ø–Ω–≤–∞—Ä (–£—Ä–∞–∑–∞-–±–∞–π—Ä–∞–º)",
    "05-23": "–î–µ–Ω—å –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω"
}

# –ö–æ–º–∞–Ω–¥—ã /sorry –∏ /comfort
SORRIES = [
    "–ü—Ä–æ—Å—Ç–∏ –º–µ–Ω—è, —ç—Ç–æ –±—ã–ª–∞ –º–æ—è –æ—à–∏–±–∫–∞.",
    "–ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç–∞–∫ –ø–æ–ª—É—á–∏–ª–æ—Å—å.",
    "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.",
    "–ù–µ —Ö–æ—Ç–µ–ª —Ç–µ–±—è –æ–±–∏–¥–µ—Ç—å, –ø—Ä–æ—Å—Ç–∏.",
    "–°–æ–∂–∞–ª–µ—é, —á—Ç–æ –Ω–µ –æ–ø—Ä–∞–≤–¥–∞–ª —Ç–≤–æ–∏ –æ–∂–∏–¥–∞–Ω–∏—è.",
    "–ò–∑–≤–∏–Ω–∏, —è –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø–æ—Å—Ç—É–ø–∏—Ç—å –∏–Ω–∞—á–µ.",
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Å—Ç–∏ –º–µ–Ω—è –∑–∞ –≥–ª—É–ø–æ—Å—Ç—å.",
    "–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –Ω–∞—Ç–≤–æ—Ä–∏–ª, –∏–∑–≤–∏–Ω—è–π—Å—è.",
    "–ú–Ω–µ —Å—Ç—ã–¥–Ω–æ, —á—Ç–æ —Ç–∞–∫ –≤—ã—à–ª–æ. –ü—Ä–æ—Å—Ç–∏.",
    "–Ø –Ω–µ —Ö–æ—Ç–µ–ª(–∞) —ç—Ç–æ–≥–æ, —á–µ—Å—Ç–Ω–æ.",
    "–ò–∑–≤–∏–Ω–∏, –º–Ω–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ –ø–æ–¥—É–º–∞—Ç—å –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—å.",
    "–≠—Ç–æ –º–æ—è –≤–∏–Ω–∞. –ü—Ä–∏–º–∏ –º–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è.",
    "–Ø –∑–Ω–∞—é, —á—Ç–æ –ø–æ–¥–≤–µ–ª(–∞) —Ç–µ–±—è. –ò–∑–≤–∏–Ω–∏.",
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π –º–Ω–µ —à–∞–Ω—Å –≤—Å—ë –∏—Å–ø—Ä–∞–≤–∏—Ç—å.",
    "–ú–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±—ã–ª–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º. –ü—Ä–æ—Å—Ç–∏."
]

COMFORTS = [
    "–í—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ.",
    "–¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è, —è –≤ —Ç–µ–±—è –≤–µ—Ä—é.",
    "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≤—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—Å—è.",
    "–≠—Ç–æ –ª–∏—à—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏.",
    "–¢—ã —Å–¥–µ–ª–∞–ª(–∞) –≤—Å—ë, —á—Ç–æ –º–æ–≥(–ª–∞).",
    "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —Ç—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º —Ç—ã –¥—É–º–∞–µ—à—å.",
    "–í—Å—ë –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –Ω–∞–ª–∞–¥–∏—Ç—Å—è.",
    "–¢—ã –Ω–µ –æ–¥–∏–Ω(–∞), —è —Ä—è–¥–æ–º.",
    "–ù–µ –ø—Ä–∏–Ω–∏–º–∞–π —ç—Ç–æ –±–ª–∏–∑–∫–æ –∫ —Å–µ—Ä–¥—Ü—É.",
    "–¢—ã –¥–æ—Å—Ç–æ–∏–Ω(–∞) –ª—É—á—à–µ–≥–æ.",
    "–í—Å–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ, –ø—Ä–æ—Å—Ç–æ –¥–∞–π —Å–µ–±–µ –≤—Ä–µ–º—è.",
    "–¢—ã –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –Ω–µ —Å–¥–∞–µ—à—å—Å—è.",
    "–õ—é–±–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏—Ç—Å—è ‚Äî –¥–∞–∂–µ —ç—Ç–∞.",
    "–¢—ã —Ö–æ—Ä–æ—à–∏–π —á–µ–ª–æ–≤–µ–∫. –ù–µ —Å–æ–º–Ω–µ–≤–∞–π—Å—è –≤ —Å–µ–±–µ.",
    "–í—Å—ë –ø—Ä–æ–π–¥–µ—Ç, –∏ —Ç—ã —Å—Ç–∞–Ω–µ—à—å —Å–∏–ª—å–Ω–µ–µ."
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

app = FastAPI()

def get_all_holidays(date_str):
    try:
        response = requests.get(f"{CHECKIDAY_API_URL}{date_str}", timeout=10)
        if response.status_code == 200:
            return [item['name'] for item in response.json().get("holidays", [])]
        else:
            return []
    except Exception as e:
        return []

def get_russian_holidays(year):
    try:
        response = requests.get(CALENDAR_API_URL.format(year=year), timeout=10)
        if response.status_code == 200:
            return [f"{item['name']} ({item['date']})" for item in response.json()]
        else:
            return []
    except Exception as e:
        return []

def get_bashkortostan_holidays(month_day):
    return [BASHKORTOSTAN_HOLIDAYS[day] for day in BASHKORTOSTAN_HOLIDAYS if day == month_day]

def generate_message(world_holidays, ru_holidays, local_holidays):
    today = datetime.now().strftime("%d %B %Y")
    message = f"üìÖ –í—Å–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –º–∏—Ä–∞ –Ω–∞ {today}:\n\n"

    if world_holidays:
        message += "üåê –ê–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏:\n"
        for h in world_holidays:
            message += f"- {h}\n"
        message += "\n"
    else:
        message += "‚ùå –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤.\n\n"

    if ru_holidays:
        message += "üá∑üá∫ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –†–æ—Å—Å–∏–∏:\n"
        for h in ru_holidays:
            message += f"- {h}\n"
        message += "\n"
    else:
        message += "üá∑üá∫ –í –†–æ—Å—Å–∏–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤.\n\n"

    if local_holidays:
        message += "üáßüáæ –†–µ—Å–ø—É–±–ª–∏–∫–∞–Ω—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω–∞:\n"
        for h in local_holidays:
            message += f"- {h}\n"
    else:
        message += "üáßüáæ –í –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω–µ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –æ—Å–æ–±—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤."

    return message

async def send_holidays(chat_id):
    now = datetime.now()
    date_str = now.strftime("%Y-%m-%d")
    month_day = now.strftime("%m-%d")
    year = now.year

    world = get_all_holidays(date_str)
    russia = get_russian_holidays(year)
    bashkir = get_bashkortostan_holidays(month_day)

    message = generate_message(world, russia, bashkir)
    await bot.send_message(chat_id=chat_id, text=message, parse_mode=ParseMode.MARKDOWN)

@dp.message(lambda message: message.text == "/start")
async def cmd_start(message: Message):
    await send_holidays(message.from_user.id)

@dp.message(lambda message: message.text == "/sorry")
async def cmd_sorry(message: Message):
    await message.answer(random.choice(SORRIES))

@dp.message(lambda message: message.text in ["/comfort", "/pg"])
async def cmd_comfort(message: Message):
    await message.answer(random.choice(COMFORTS))

@app.get("/send-holidays")
async def trigger_send():
    await send_holidays(ADMIN_ID)
    return {"status": "ok"}

@app.post("/")
async def webhook(update: dict):
    await dp._process_update(bot, Update(**update))

@app.on_event("startup")
async def on_startup():
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/"
    await bot.set_webhook(webhook_url)

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await bot.session.close()

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("bot:app", host="0.0.0.0", port=int(os.getenv("PORT", 10000)))
