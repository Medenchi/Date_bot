import asyncio
import requests
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.types import ParseMode

API_TOKEN = "7967235756:AAGBflfRWJNZzJ_hD1bArkOB-LxcgNA17dY"
ADMIN_ID = 6613852308  # –¢–≤–æ–π Telegram ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π

# –ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
CHECKIDAY_API_URL = "https://checkiday.com/api/v1/dates/"

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –†–æ—Å—Å–∏–∏ –∏ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –ø–æ–¥ –¥—Ä—É–≥–∏–µ —Ä–µ—Å–ø—É–±–ª–∏–∫–∏)
RU_HOLIDAYS_API = "https://date.nager.at/api/v2/PublicHolidays/{year}/RU"

def get_all_holidays(date_str):
    try:
        response = requests.get(f"{CHECKIDAY_API_URL}{date_str}")
        return [item['n'] for item in response.json()['holidays']]
    except Exception as e:
        return []

def get_russian_holidays(year):
    try:
        response = requests.get(f"{RU_HOLIDAYS_API.format(year=year)}")
        return [f"{item['name']} ({item['date']})" for item in response.json()]
    except Exception as e:
        return []

def get_bashkortostan_holidays(month_day):
    BASHKORTOSTAN_HOLIDAYS = {
        "01-21": "–î–µ–Ω—å —Ä–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ –±–∞—à–∫–∏—Ä",
        "06-24": "–ü—Ä–∞–∑–¥–Ω–∏–∫ –°–∞–±–∞–Ω—Ç—É–π",
        "04-15": "“†—ã—É—ã–ª—Ç –Ø–Ω–≤–∞—Ä (–£—Ä–∞–∑–∞-–±–∞–π—Ä–∞–º)",
        "05-23": "–î–µ–Ω—å –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω"
    }
    return [BASHKORTOSTAN_HOLIDAYS[day] for day in BASHKORTOSTAN_HOLIDAYS if day == month_day]

def generate_message(all_holidays, ru_holidays, local_holidays):
    today = datetime.now().strftime("%d %B %Y")
    message = f"üìÖ –í—Å–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –º–∏—Ä–∞ –Ω–∞ {today}:\n\n"

    if all_holidays:
        message += "üåê –ê–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏:\n"
        for h in all_holidays:
            message += f"- {h}\n"
        message += "\n"

    if ru_holidays:
        message += "üá∑üá∫ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –†–æ—Å—Å–∏–∏:\n"
        for h in ru_holidays:
            message += f"- {h}\n"
        message += "\n"

    if local_holidays:
        message += "üáßüáæ –†–µ—Å–ø—É–±–ª–∏–∫–∞–Ω—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω–∞:\n"
        for h in local_holidays:
            message += f"- {h}\n"
    else:
        message += "üáßüáæ –í –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω–µ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –æ—Å–æ–±—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤.\n"

    return message

async def send_holidays(bot):
    now = datetime.now()
    date_str = now.strftime("%Y-%m-%d")
    month_day = now.strftime("%m-%d")

    all_holidays = get_all_holidays(date_str)
    ru_holidays = get_russian_holidays(now.year)
    local_holidays = get_bashkortostan_holidays(month_day)

    message = generate_message(all_holidays, ru_holidays, local_holidays)

    await bot.send_message(chat_id=ADMIN_ID, text=message, parse_mode=ParseMode.MARKDOWN)

async def main():
    bot = Bot(token=API_TOKEN)
    try:
        await send_holidays(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
